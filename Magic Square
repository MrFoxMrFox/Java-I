/ Kyle Hampton 
// CIST 1400-006 
// 11 
// November 28, 2016 
// N/A 
 
import java.util.Scanner; 
import java.io.File; 
 
public class kthampton_MagicSquare { 
    public static void main ( String args[] ) { 
        try { 
            Scanner keyboard = new Scanner ( System.in ); 
            System.out.println( "Enter input filename:" ); 
            String inFile; 
            inFile = keyboard.next(); 
 
            File file = new File( inFile ); 
            Scanner input = new Scanner( file ); 
 
            final int dimension = input.nextInt(); 
            final int magicNum = ( dimension * ((dimension * dimension) + 1 )) / 2; 
            int[][] buffer = new int[dimension][dimension]; 
            for ( int r = 0; r < buffer.length; r++ ) { 
                for ( int c = 0; c < buffer[r].length; c++ ) { 
                    int v = input.nextInt(); 
                    buffer[r][c] = v; 
                } 
            } 
            displaySquare( buffer, magicNum ); 
            Boolean rowStatus = checkRows( buffer, magicNum ); 
            Boolean colStatus = checkColumns( buffer, magicNum ); 
            Boolean diagStatus = checkDiagonals( buffer, magicNum ); 
            Boolean uniqueStatus = checkUnique( buffer ); 
            System.out.print( "\nMAGIC SQUARE: "); 
            if ( rowStatus == true && colStatus == true && diagStatus == true && uniqueStatus == true ) { 
                System.out.println( "GOOD" ); 
            } 
            else { 
                System.out.println( "BAD" ); 
            } 
        } 
        catch ( Exception ex ) { 
            System.out.println( "An error has occurred!" ); 
            ex.printStackTrace(); 
        } 
    } 
    /** 
     * displaySquare() 
     * 
     * This method displays the square in nice, tidy rows and columns. 
     * Each row should be labeled as [XX], where XX is the number of the 
     * row, and each column should have an [XX] above it as a header 
     * where XX is the column number. 
     * 
     * The method should also display a textual header about the size of 
     * the square and the magic number of the square.  See the example runs 
     * for an idea what the output should look like. 
     *  
     * @param      square      a 2-d int array representing the square 
     * @param      magicnum    an int containing the calculated magic number 
     * @return     None 
     */ 
    public static void displaySquare (int[][] square, int magicnum ) { 
        System.out.println( "\nChecking a " + square.length + " x " + square.length + " Magic Square!" ); 
        System.out.println( "The magic number is " + magicnum + "\n" ); 
 
        char lefty = '['; 
        System.out.print("    "); 
        for ( int x = 1; x <= square.length; x++ ) { 
            System.out.printf( " %s %d]", lefty,  x ); 
        } 
        System.out.println(); 
        for ( int r = 0; r < square.length; r++ ) { 
            System.out.printf( "%s %d]", lefty, r+1 ); 
            for ( int c = 0; c < square[r].length; c++ ) { 
                System.out.printf( "%5d", square[r][c] ); 
            } 
            System.out.println(); 
        } 
    } 
    /** 
     * checkRows() 
     * 
     * This method checks each row to see if it is a valid row, with all 
     * values adding up to the magic number sent in as an argument. Label 
     * the row outputs starting at 1. 
     * 
     * The output should be either the text GOOD or BAD, depending on the 
     * status of the individual row.  If the row is BAD, also include what
     * that row added up to instead of the magic number.  See the example
     * runs for an idead of what the output should look lie.
     *
     * The method should return true if all of the rows are valid and false
     * otherwise
     *
     * @param      square      a 2-d int array representing the square
     * @param      magicnum    an int containing the calculated magic number
     * @return     boolean     true or false if all of the rows are valid
     */
    public static boolean checkRows( int[][] square, int magicnum ) {
        Boolean valid = true;
        System.out.println();
        for ( int r = 0; r < square.length; r++ ) {
            int rowSum = 0;
            for ( int c = 0; c < square[r].length; c++ ) {
                rowSum += square[r][c];
            }
            if ( rowSum == magicnum ) {
                System.out.printf( "ROW %d: GOOD\n", r+1 );
            }
            else {
                System.out.printf( "ROW %d: BAD (%d instead of %d)\n", r+1, rowSum, magicnum );
                valid = false;
            }
        }
        return valid;
    }
    /**
     * checkColumns()
     *
     * This method checks each column to see if it is a valid row, with all
     * values adding up to the magic number sent in as an argument. Label
     * the column outputs starting at 1.
     *
     * The output should be either the text GOOD or BAD, depending on the
     * status of the individual column.  If the row is BAD, also include what
     * that column added up to instead of the magic number.  See the example
     * runs for an idead of what the output should look lie.
     *
     * The method should return true if all of the columns are valid and false
     * otherwise
     *
     * @param      square      a 2-d int array representing the square
     * @param      magicnum    an int containing the calculated magic number
     * @return     boolean     true or false if all of the columns are valid
     */
    public static boolean checkColumns( int[][] square, int magicnum ) {
        Boolean valid = true;
        System.out.println();
        for ( int c = 0; c < square.length; c++ ) {
            int colSum = 0;
            for ( int r = 0; r < square[c].length; r++ ) {
                colSum += square[r][c];
                //System.out.printf( "%5d", square[r][c] );
            }
            if ( colSum == magicnum ) {
                System.out.printf( "COL %d: GOOD\n", c+1 );
            }
            else {
                System.out.printf( "COL %d: BAD (%d instead of %d)\n", c+1, colSum, magicnum );
                valid = false;
            }
        }
        return valid;
    }
    /**
     * checkDiagonals()
     *
     * This method checks the two major diagonals to see if they are valid,
     * with all values adding up to the magic number sent in as an argument.
     * Label the diagonal from upper-left corner (position [0][0]) to the
     * bottom-right corner (position [n-1][n-1]) as DIAG 1. Label the
     * other diagonal as DIAG 2.
     *
     * The output should be either the text GOOD or BAD, depending on the 
     * status of the individual diagonal. If the diagonal is BAD, also include
     * what that diagonal added up to instead of the magic number.  See the
     * example runs for an idea what the ouput should look like.
     *
     * The method should return true if both of the diagonals are valid and false
     * otherwise/
     * 
     * @param      square      a 2-d int array representing the square
     * @param      magicnum    an int containing the calculated magic number
     * @return     boolean     true or false if all of the columns are valid
     */
    public static boolean checkDiagonals( int[][] square, int magicnum ) {
        Boolean valid = true;
        System.out.println();
        //DIAG 1 
        int diagSum1 = 0;
        for ( int r = 0; r < square.length; r++ ) {
            for ( int c = 0; c < square[r].length; c++ ) {
                if ( r == c) {
                    diagSum1 += square[r][c];
                }
            }
        }
        if ( diagSum1 == magicnum ) {
            System.out.println("DIAG 1: GOOD" );
        }
        else {
            System.out.printf( "DIAG 1: BAD (%d instead of %d)\n", diagSum1, magicnum );
            valid = false;
        }
        //DIAG 2
        int diagSum2 = 0;
        for ( int r = 0; r < square.length; r++ ) {
            for ( int c = 0; c < square[r].length; c++ ) {
                if ( (square.length - 1) - r == c ) {
                    diagSum2 += square[r][c];
                }
            }
        }
        if ( diagSum2 == magicnum ) {
            System.out.println("DIAG 2: GOOD" );
        }
        else {
            System.out.printf( "DIAG 2: BAD (%d instead of %d)\n", diagSum2, magicnum );
            valid = false;
        }
        return valid;
    }
    /**
     * checkUnique()
     *
     * This method checks to see if each value used in the potential magic
     * square has been used once and only once in the entirety of the square.
     *
     * Different-sized squares will have different potential ranges of values
     * to test. For instance, a 4x4 square will have 16 potential values
     * to test (1-16).  A 7x7 square will have 49 potential values to test.
     *
     * If all values in the appropriate range have been used only once,
     * the output should be the text GOOD for the label UNIQUE.
     *
     * If a value was used more than once or wasn't used at all, it should
     * be listed in order from smallest to largest with a space between each
     * offending value.
     *
     * See the example runs for an idea what the output should look lie.
     *
     * The method should return true if all values have been used exactly once
     * and false otherwise.
     *
     * @param      square      a 2-d int array representing the square
     * @return     boolean     true or false if all values are used exactly once
     */
    public static boolean checkUnique( int[][] square ) {
        boolean valid = true;
        int numTotal = square.length * square.length;
        System.out.println();
        int[] numLine = new int[numTotal];
        for ( int r = 0; r < square.length; r++ ) {
            for ( int c = 0; c < square[r].length; c++ ) {
                int v = square[r][c];
                numLine[v-1]++;
            }
        }
        System.out.print("UNIQUE: ");
        for ( int y = 0; y < numTotal; y++ ) {
            if ( numLine[y] == 1 ) {
            }
            else {
                System.out.print( (y + 1) + " " );
                valid = false;
            }
        }
        if ( valid == true ) {
            System.out.print( "GOOD" );
        }
        System.out.println();
        return valid;
    }
}
~
~                     
