// Kyle Hampton 
// CIST 1400-006 
// 8 
// October 21, 2016 
// N/A 
 
import java.util.Scanner; 
public class kthampton_ReadingMethods { 
    private static Scanner input = new Scanner ( System.in ); 
    public static void main ( String args [] ) { 
        double words = getWords(); 
        double sentences = getSentences(); 
        double big = getBigWords(); 
        double syllables = getSyllables(); 
        double gunningFog = GunningFog( words, sentences, big ); 
        double readingEaseScore = FleschREScore( words, sentences, syllables ); 
        String gradeLevel = FleschGL( readingEaseScore ); 
        displayResults( gunningFog, readingEaseScore, gradeLevel); 
    } 
    /** 
     * getWords 
     * 
     * This method should read a value from the user until the value entered 
     * is greater than or equal to 100 (we need at least 100 words to make 
     * a useful reading level determination). 
     * 
     * @param   No parameters are required 
     * @return  The number of words as a double  
     */ 
    public static double getWords () { 
        double words; 
        Boolean goodWords; 
        do { 
            goodWords = true; 
            System.out.print( "Please enter the number of words in the sample: "); 
            words = input.nextDouble(); 
            if ( words >= 100) { 
                goodWords = false;} 
        } while (goodWords == true); 
        return words; 
    } 
    /** 
     * getSentences 
     * 
     * This method should read a value from the user until the value entered 
     * is greater than or equal to 1. It's assumed that there should be at 
     * least 1 sentence in the sample. 
     * 
     * @param   No parameters are required 
     * @return  The number of sentences as a double 
     */ 
    public static double getSentences () { 
        double sentences; 
        Boolean goodSentences; 
        do { 
            goodSentences = true; 
            System.out.print( "Please enter the number of sentences in the sample: "); 
            sentences = input.nextDouble(); 
            if ( sentences >= 1) { 
                goodSentences = false;} 
        } while (goodSentences == true); 
        return sentences; 
    } 
    /** 
     * getBigWords 
     * 
     * This method should read a value from the user until the value entered 
     * is greater than or equal to 0. "Big words" are words with three or 
     * more syllables. It is possible that the reading sample has 0 "big 
     * words", so this method should validate for 0 or above. 
     * 
     * @param  No parameters are required 
     * @return The number of big words as a double 
     */ 
    public static double getBigWords() { 
        double big; 
        Boolean goodBigWords; 
        do { 
            goodBigWords = true; 
            System.out.print( "Please enter the number of \"big words\" in the sample: "); 
            big = input.nextDouble(); 
            if ( big >= 0 ) { 
                goodBigWords = false;} 
        } while (goodBigWords == true); 
        return big; 
    } 
    /** 
     * getSyllables 
     * 
     * This method should read a value from the user until the value entered 
     * is greater than or equal to 1. Assuming there are at least 100 words 
     * in the sample, there should be at least 1 syllable in the sample. 
     * 
     * @param   No parameters are required 
     * @return  The number of syllables as a double  
     */ 
    public static double getSyllables() { 
        double syllables; 
        boolean goodSyllables; 
        do { 
            goodSyllables = true; 
            System.out.print( "Please enter the number of syllables in the sample: "); 
            syllables = input.nextDouble(); 
            if ( syllables >= 1 ) { 
                goodSyllables = false;} 
        } while (goodSyllables == true); 
        return syllables; 
    } 
    /** 
     * GunningFog 
     * 
     * This method should determine the Gunning Fog Index given the number of 
     * words, sentences and big words in a passage. 
     * 
     * @param   words       The number of words in the sample as a double 
     * @param   sentences   The number of sentences in the sample as a double 
     * @param   big         The number of big words in the sample as a double 
     * @return  The Gunning Fog Index as a double 
     */ 
    public static double GunningFog( double words, double sentences, double big ) { 
        double gunningFog; 
        double avgSentLeng = ( words / sentences ); 
        double perBigWords = (( big / words ) * 100); 
        gunningFog = ((avgSentLeng + perBigWords) *.4); 
        return gunningFog; 
    } 
    /**  
     * FleshREScore 
     * 
     * This method should determine the Flesh Reading Ease Score given the 
     * number of words, sentences and syllables in a passage. 
     * 
     * @param   words       The number of words in the sample as a double 
     * @param   sentences   The number of sentences in the sample as a double 
     * @param   syllables   The number of syllables in the sample as a double 
     * @return  The Flesh Formula Reading Ease Score as a double 
     */ 
    public static double FleschREScore ( double words, double sentences, double syllables ) { 
        double readingEaseScore; 
        double avgSentLeng = ( words / sentences ); 
        double ffAvgSentLeng = ( avgSentLeng * 1.015 ); 
        double syllWords = (( syllables / words) * 84.6 ); 
        readingEaseScore = (206.835 - (ffAvgSentLeng + syllWords)); 
        return readingEaseScore; 
    } 
    /** 
     * FleshGL 
     * 
     * This method should determine the Flesch Formula Grade Level given the 
     * Flesh Reading Ease Score. 
     * 
     * @param   readingEaseScore    The Flesch Formula Reading Ease Score as a double 
     * @return  The Flesch Grade Level as a String 
     */ 
    public static String FleschGL( double readingEaseScore) { 
        String gradeLevel; 
        if ( readingEaseScore > 100 ) { 
            gradeLevel = "Not defined";} 
        else if ( readingEaseScore >= 90 ){ 
            gradeLevel = "4th to 5th grade";} 
        else if ( readingEaseScore >= 80 ){ 
            gradeLevel = "5th to 6th grade";} 
        else if ( readingEaseScore >= 70 ){ 
            gradeLevel = "7th grade";} 
        else if ( readingEaseScore >= 60 ){ 
            gradeLevel = "8th to 9th grade";} 
        else if ( readingEaseScore >= 50 ){
            gradeLevel = "High School";}
        else if ( readingEaseScore >= 30 ){
            gradeLevel = "College";}
        else if ( readingEaseScore >= 0 ){
            gradeLevel = "Post Graduate";}
        else {gradeLevel = "Not defined";}
        return gradeLevel;
    }
    /**
     * displayResults
     *
     * This method should output the final results of the Gunning Fog Index,
     * the Flesch Reading Ease Score and the Flesch Grade Level.
     *
     * @param   gunningFog          The Gunning Fog Inde as a  double
     * @param   readingEaseScore    The Flesch Formula Reading Ease Score as a double
     * @param   gradeLevel          The Flesch Grade Level as a double
     */
    public static void displayResults( double gunningFog, double readingEaseScore, String gradeLevel ) {
        System.out.println();
        System.out.printf ( "The Gunning Fog Index of this sample is %.2f\n", gunningFog );
        System.out.printf ( "The Reading Ease Score is %.2f\n", readingEaseScore );
        System.out.printf ( "The Flesch Grade Level is: %s\n", gradeLevel );
    }
}
 
~
~
~
~
~                                                                             
